#include <iostream>
using namespace std;

template<class T>
class Node
{
public:
	T value;
	Node* left;
	Node* right;
};

template<class T>
class Tree {
public:
	Tree();
	~Tree();

	void Insert(T key);
	Node<T>* Search(T key);
	void DestroyTree();
	void IncorderPrint();
	void PostorderPrint();
	void PreorderPrint();

private:
	void DestroyTree(Node<T>* leaf);
	void Insert(T key, Node<T>* leaf);
	Node<T>* Search(T key, Node<T>* leaf);
	void IncorderPrint(Node<T>* leaf);
	void PostorderPrint(Node<T>* leaf);
	void PreorderPrint(Node<T>* leaf);

	Node<T>* root;
};

template<class T>
Tree<T>::Tree()
{
	root = nullptr;
}

template<class T>
Tree<T>::~Tree()
{
	DestroyTree();
}

template<class T>
void Tree<T>::DestroyTree(Node<T>* leaf)
{
	if (leaf != nullptr)
	{
		DestroyTree(leaf->left);
		DestroyTree(leaf->right);
		delete leaf;
	}
}

template<class T>
void Tree<T>::Insert(T key, Node<T>* leaf)
{
	if (key < leaf->value)
	{
		if (leaf->left != nullptr)
			Insert(key, leaf->left);
		else
		{
			leaf->left = new Node<T>;
			leaf->left->value = key;
			leaf->left->left = nullptr;
			leaf->left->right = nullptr;
		}
	}
	else if (key >= leaf->value)
	{
		if (leaf->right != nullptr)
			Insert(key, leaf->right);
		else
		{
			leaf->right = new Node<T>;
			leaf->right->value = key;
			leaf->right->right = nullptr;
			leaf->right->left = nullptr;
		}
	}
}

template<class T>
void Tree<T>::Insert(T key)
{
	if (root != nullptr)
		Insert(key, root);
	else
	{
		root = new Node<T>;
		root->value = key;
		root->left = nullptr;
		root->right = nullptr;
	}
}

template<class T>
Node<T>* Tree<T>::Search(T key, Node<T>* leaf)
{
	if (leaf != nullptr)
	{
		if (key == leaf->value)
			cout << "Found!\n";
		if (key < leaf->value)
			return Search(key, leaf->left);
		else
			return Search(key, leaf->right);
	}
	else
		return nullptr;
}

template<class T>
Node<T>* Tree<T>::Search(T key)
{
	return Search(key, root);
}

template<class T>
void Tree<T>::DestroyTree()
{
	DestroyTree(root);
}

template<class T>
void Tree<T>::IncorderPrint()
{
	IncorderPrint(root);
	cout << "\n";
}

template<class T>
void Tree<T>::IncorderPrint(Node<T>* leaf)
{
	if (leaf != nullptr)
	{
		IncorderPrint(leaf->left);
		cout << leaf->value << ",";
		IncorderPrint(leaf->right);
	}
}

template<class T>
void Tree<T>::PostorderPrint()
{
	IncorderPrint(root);
	cout << "\n";
}

template<class T>
void Tree<T>::PostorderPrint(Node<T>* leaf)
{
	if (leaf != nullptr)
	{
		IncorderPrint(leaf->left);
		IncorderPrint(leaf->right);
		cout << leaf->value << ",";
	}
}

template<class T>
void Tree<T>::PreorderPrint()
{
	PreorderPrint(root);
	cout << "\n";
}

template<class T>
void Tree<T>::PreorderPrint(Node<T>* leaf)
{
	if (leaf != nullptr)
	{
		cout << leaf->value << ",";
		IncorderPrint(leaf->left);
		IncorderPrint(leaf->right);
	}
}

int main()
{
	Tree<string>* tree = new Tree<string>();

	tree->Insert("Miras");
	tree->Insert("Sarim");
	tree->Insert("Apple");

	cout << (int)tree->Search("Apple");
	tree->PreorderPrint();
	tree->IncorderPrint();
	tree->PostorderPrint();

	delete tree;
}
